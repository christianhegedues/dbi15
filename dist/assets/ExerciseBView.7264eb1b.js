import{_ as c}from"./Counter.caf6938d.js";import{s}from"./supabase.d4556b71.js";import{r as o,o as l,j as d,b as m,c as p,d as b,g as e,f as r}from"./index.10701af8.js";const h={class:"exercise"},f=e("p",null,[e("strong",null,"Reflektion")],-1),_=e("p",null,[r("Um einen Z\xE4hler \xFCber mehrere Browser hinweg aktuell zu halten, kommt man mit einer clientseitigen Umsetzung allein nicht weiter. Es braucht eine Datenbank, die den Wert des Z\xE4hlers h\xE4lt und eine wechselseitige Kommunikation zwischen Client und Server zum Beispiel \xFCber WebSockets. Um die Aufgabe zu l\xF6sen, wurde auf den Service von "),e("a",{href:"https://supabase.com/",target:"_blank"},"Supabase"),r(" zur\xFCckgegriffen, der beides mit Einschr\xE4nkungen kostenfrei anbietet.")],-1),g=e("p",null,"Bei Supabase wurde eine Datenbank-Tabelle angelegt, die den aktuellen Wert des Z\xE4hlers persistiert. Danach wurde eine WebSockets-Verbindung eingerichtet, die bei einem Update-Event die aktualisierten Daten an den Client sendet.",-1),S={name:"ExerciseBView",setup(k){const a=o(null),n=o(0);async function u(t){await s.from("counter").upsert({id:3,count:n.value+t})}return l(async()=>{const{data:t}=await s.from("counter").select("count").eq("id",3).single();n.value=t.count,a.value=s.from("counter").on("UPDATE",i=>{n.value=i.new.count}).subscribe()}),d(()=>{s.removeSubscription(a.value)}),(t,i)=>(m(),p("section",h,[b(c,{count:n.value,"onUpdate:count":u},null,8,["count"]),f,_,g]))}};export{S as default};
