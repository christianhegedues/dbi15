import{b as t,c as r,F as h,k as m,t as v,r as o,o as g,j as b,g as e,l as k}from"./index.cdd040a9.js";import{s as d}from"./supabase.d4556b71.js";const w={class:"user-info"},y={name:"UserInfo",props:{data:{type:Array,required:!0}},setup(c){return(i,l)=>(t(),r("ul",w,[(t(!0),r(h,null,m(c.data,(a,u)=>(t(),r("li",{key:u},v(a),1))),128))]))}};const z={class:"flex"},A=e("div",{class:"flex-item"},[e("strong",null,"Reflektion"),e("p",null,"Da Github-Pages Content nur statisch ausliefert, muss ich zum Abgreifen der IP-Adresse auf einen Service zur\xFCckgreifen. Bei eigenem Webserver kann darauf verzichtet werden und man hat die M\xF6glichkeit z.B. mit JSP die IP-Adresse abzufragen und global zu speichern: "),e("code",null,"const ip = '<%=request.getRemoteHost();%>';"),e("p",null,"Die n\xE4chsten Schritte \xE4hneln denen aus Aufgabe 2. Sobald der Besucher die Seite betritt, wird die ermittelte IP-Adresse in einer Datenbank-Tabelle gespeichert - es wird allerdings vorher gepr\xFCft, ob die letzte Zeile der Tabelle bereits die aktuelle IP-Adresse enth\xE4lt, um Dopplungen zu vermeiden. Danach wird \xFCber WebSockets ein bidirktionaler Kanal zur Datenbank-Tabelle aufgebaut und auf Update-Events geh\xF6rt. ")],-1),D={class:"flex-item"},x={class:"ip"},B=e("p",null,"Die letzten zehn Besucher:",-1),I={key:1},E={name:"ExerciseCView",setup(c){const i=o(!1),l=o([]),a=o(null),u=o(null);async function p(){return(await(await fetch("https://api.db-ip.com/v2/free/self")).json()).ipAddress}async function _(s){const{data:n}=await d.from("users").select("ip_address").order("created_at",{ascending:!1}).limit(s);return n.reverse()}return g(async()=>{i.value=!0,a.value=await p();const s=await _(1);(!s.length||s[0].ip_address!=a.value)&&await d.from("users").insert([{ip_address:a.value}]),l.value=await _(10),u.value=d.from("users").on("*",n=>{l.value=n.new.ip_address}).subscribe(),i.value=!1}),b(()=>{d.removeSubscription(u.value)}),(s,n)=>(t(),r("section",z,[A,e("div",D,[e("div",x,[B,i.value?(t(),r("span",I," Daten werden geladen... ")):(t(),k(y,{key:0,data:l.value.map(f=>f.ip_address)},null,8,["data"]))])])]))}};export{E as default};
